The ``7-base_geometry`` module
======================

Using ``integer_validator``
-------------------

This is an example text file in reStructuredText format.  First import
``integer_validator`` from the ``7-base_geometry`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

    >>> bg = BaseGeometry()

    >>> bg.integer_validator("my_int", 12)

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

    >>> bg.integer_validator("distance", 6)

    >>> bg.integer_validator("distance", )
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator(, 6)
    Traceback (most recent call last):
    SyntaxError: invalid syntax

    >>> bg.integer_validator("distance", None)
    Traceback (most recent call last):
    TypeError: distance must be an integer
    
    >>> bg.integer_validator("distance", 4.5)
    Traceback (most recent call last):
    TypeError: distance must be an integer

    >>> bg.integer_validator("distance", "Hey")
    Traceback (most recent call last):
    TypeError: distance must be an integer

    >>> bg.integer_validator("distance", (1, 2))
    Traceback (most recent call last):
    TypeError: distance must be an integer

    >>> bg.integer_validator("distance", [1, 2])
    Traceback (most recent call last):
    TypeError: distance must be an integer
